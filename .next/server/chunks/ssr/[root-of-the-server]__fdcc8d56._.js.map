{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///D:/CodeClash-main/CodeClash-main/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport 'dotenv/config';\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      apiKey: process.env.GEMINI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;AACA;;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,cAAc;QACpC;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///D:/CodeClash-main/CodeClash-main/src/ai/flows/generateProblemFlow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow to generate coding problems using AI.\n *\n * - generateProblem - A function that generates a new coding problem based on a topic.\n * - GenerateProblemInput - The input type for the generateProblem function.\n * - Problem - The return type for the generateProblem function, representing a coding problem.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport type { Problem } from '@/lib/problems';\n\n// A schema for valid JSON values, restricted to primitives and arrays of\n// primitives/arrays. This is a workaround for limitations in the backend API's\n// schema parser, which dislikes fully generic object definitions.\nconst literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);\nconst jsonSchema: z.ZodType<any> = z.lazy(() =>\n  z.union([literalSchema, z.array(jsonSchema)])\n);\n\n\nconst TestCaseSchema = z.object({\n  input: z.array(jsonSchema).describe(\"An array of arguments for the function. This MUST be an array of pure JSON values (primitives or arrays). Objects are not supported.\"),\n  expected: jsonSchema.refine(val => val !== null && val !== undefined, { message: \"Expected value cannot be null or undefined.\" }).describe(\"The expected output for the test case. It MUST NOT be null or undefined.\"),\n});\n\nconst ProblemSchema: z.ZodType<Problem> = z.object({\n  id: z.string().describe('A unique identifier for the problem, in kebab-case. e.g., \"two-sum\"'),\n  title: z.string().describe('The title of the coding problem.'),\n  description: z.string().describe('A detailed description of the problem. Use newlines (`\\\\n`) for formatting. Do not use Markdown characters like `#` or `*`.'),\n  examples: z.array(z.object({\n    input: z.string().describe('A human-readable string representing an example input for the problem.'),\n    output: z.string().describe('The corresponding human-readable output for the example input.'),\n    explanation: z.string().optional().describe('An optional explanation of the example.'),\n  })).min(3).describe('An array of at least 3 clear examples with human-readable inputs, outputs, and optional explanations.'),\n  starterCode: z.string().describe('Boilerplate code in JavaScript for the user to start with, as a standard function declaration. e.g., \"function twoSum(nums, target) { ... }\"'),\n  solution: z.string().describe('A correct and optimal solution in JavaScript.'),\n  testCases: z.array(TestCaseSchema).min(5).describe(\"An array of at least 5 test cases to verify the solution. The 'input' field should be an array of arguments for the function.\"),\n  entryPoint: z.string().describe(\"The name of the function to be tested, e.g., 'twoSum'.\"),\n});\nexport type { Problem };\n\nconst GenerateProblemInputSchema = z.object({\n  topic: z.string().describe('The topic for the coding problem, e.g., \"Arrays & Hashing\", \"Dynamic Programming\".'),\n  difficulty: z.enum(['easy', 'medium', 'hard']).default('medium').optional().describe('The difficulty level of the problem.'),\n  seed: z.string().optional().describe('A random string to ensure the problem is unique and not from a cache.'),\n});\nexport type GenerateProblemInput = z.infer<typeof GenerateProblemInputSchema>;\n\n\nexport async function generateProblem(input: GenerateProblemInput): Promise<Problem> {\n  return generateProblemFlow(input);\n}\n\nconst generateProblemPrompt = ai.definePrompt({\n  name: 'generateProblemPrompt',\n  input: { schema: GenerateProblemInputSchema },\n  output: { schema: ProblemSchema },\n  prompt: `You are an expert programming challenge creator for a platform called CodeClash. Your task is to generate a unique, LeetCode-style problem based on a given topic.\n\nThe problem should be self-contained, clearly explained, and engaging. The difficulty should match the requested level (defaulting to medium if not specified). The problem, examples, and test cases should be solvable in JavaScript.\n\n**CRITICAL INSTRUCTIONS - FOLLOW THESE EXACTLY:**\n1.  **Output Format:** You MUST return a single JSON object that strictly adheres to the provided schema. ALL fields (\\`id\\`, \\`title\\`, \\`description\\`, \\`examples\\`, \\`starterCode\\`, \\`solution\\`, \\`testCases\\`, \\`entryPoint\\`) are mandatory.\n\n2.  **Problem Description Quality:**\n    *   Write clear, concise problem statements with proper formatting.\n    *   Include constraints like input size limits and value ranges.\n    *   Break down complex problems into steps or parts.\n    *   Use consistent terminology throughout the description.\n    *   Include time and space complexity expectations for optimal solutions.\n\n3.  **Examples Quality:**\n    *   Provide at least 3 examples with increasing complexity.\n    *   Include edge cases in your examples.\n    *   For each example, give a clear explanation of the step-by-step solution process.\n    *   Make sure examples are diverse and cover different scenarios.\n\n4.  **Test Case Validity is PARAMOUNT:**\n    *   You MUST provide at least 8 complete test cases.\n    *   Include a mix of simple cases, edge cases, and complex scenarios.\n    *   For **EVERY SINGLE TEST CASE**, the \\`expected\\` field MUST have a valid, concrete value.\n    *   The \\`expected\\` field **CANNOT BE \\`null\\`**.\n    *   The \\`expected\\` field **CANNOT BE \\`undefined\\`**.\n    *   If the correct output is an empty array, the \\`expected\\` value must be \\`[]\\`.\n    *   If the correct output is an empty string, the \\`expected\\` value must be \\`\"\"\\`.\n    *   If the correct output is \\`0\\`, the \\`expected\\` value must be \\`0\\`.\n    *   **There are no exceptions. The \\`expected\\` field must always be populated with a real value.**\n\n5.  **CRITICAL \\`testCases.input\\` FORMATTING:**\n    *   The \\`input\\` field for each test case MUST be an array of arguments.\n    *   The values within this array MUST be pure, valid JSON types (strings, numbers, booleans, nulls, and arrays). Objects are NOT supported.\n    *   **DO NOT** represent arrays or numbers as strings within the JSON.\n    *   **CORRECT:** \\`\"input\": [[1, 2, 3], 4]\\`\n    *   **INCORRECT:** \\`\"input\": [\"[1, 2, 3]\", 4]\\`\n    *   **INCORRECT:** \\`\"input\": [\"[1, 2, 3]\", \"4\"]\\`\n    *   **INCORRECT:** \\`\"input\": \"[[1,2,3], 4]\"\\` (The entire value should not be a string)\n    *   For a function \\`twoSum(nums, target)\\` a CORRECT \\`input\\` is \\`[[2, 7, 11, 15], 9]\\`.\n    *   For a function \\`rotate(nums, k)\\` a CORRECT \\`input\\` is \\`[[1,2,3,4,5], 2]\\`.\n\n6.  **Starter Code Quality:**\n    *   Provide meaningful variable names and basic structure.\n    *   Include helpful comments explaining the function parameters and expected return value.\n    *   Do not include solution hints in the starter code.\n\n7.  **Solution Quality:**\n    *   Provide an optimal, well-commented solution.\n    *   Include time and space complexity analysis in comments.\n    *   Use clear variable names and follow best practices.\n\n8.  **No Comments:** The final JSON output must NOT contain any comments.\n\n**Topic:** {{{topic}}}\n**Difficulty:** {{{difficulty}}}\n**Unique Request Seed:** {{{seed}}}\n\nGenerate a problem with all the required fields, paying special attention to the format and validity of the \\`testCases\\`. Double-check your work to ensure \\`expected\\` is never null or undefined and that all input values are pure JSON types.`,\n});\n\nconst generateProblemFlow = ai.defineFlow(\n  {\n    name: 'generateProblemFlow',\n    inputSchema: GenerateProblemInputSchema,\n    outputSchema: ProblemSchema,\n  },\n  async (input) => {\n    const { output } = await generateProblemPrompt(input);\n    if (!output) {\n      throw new Error('Failed to generate a problem from the AI model.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":["file:///D:/CodeClash-main/CodeClash-main/.next-internal/server/app/matching/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateProblem as '40cc9bc906bdf3c09dcf5709227d7f9edda1cd7901'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///D:/CodeClash-main/CodeClash-main/src/app/matching/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/matching/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/matching/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA","debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["file:///D:/CodeClash-main/CodeClash-main/src/app/matching/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/matching/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/matching/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA","debugId":null}},
    {"offset": {"line": 466, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}